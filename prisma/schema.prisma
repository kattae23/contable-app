generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusEnum {
  PENDING
  SUCCESS
  FAILED
}

enum AccountPlansEnum {
  HOBBIE
  PRO
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String           @unique
  lastName       String?
  nacionality    String?
  dateOfBirth    DateTime?        @map("date_of_birth")
  phone          String?
  password       String?
  image          String?
  emailVerified  DateTime?        @map("email_verified")
  role           String           @default("user")
  accountPlans   AccountPlansEnum @default(HOBBIE) @map("account_plans")
  legalName      String?          @map("legal_name")
  secondLastName String?          @map("second_last_name")
  accounts       Account[]
  balance        Balance?
  customers      Customers[]
  expenses       Expenses[]
  savings        Savings[]
  sessions       Session[]
  transactions   Transactions[]
  categories     Categories[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")

  @@index([email, name, lastName, secondLastName, legalName, image])
  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Customers {
  id           String         @id @default(uuid())
  name         String
  lastname     String?
  email        String?
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  transactions Transactions[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("customer")
}

model Categories {
  id           String         @id @default(uuid())
  name         String
  expenses     Expenses[]
  transactions Transactions[]
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")

  @@map("categories")
}

model Expenses {
  id          String     @id @default(uuid())
  title       String
  amount      Float
  description String?
  status      StatusEnum @default(PENDING)
  userId      String
  categoryId  String
  category    Categories @relation(fields: [categoryId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")

  @@map("expenses")
}

model Transactions {
  id          String     @id @default(uuid())
  title       String
  amount      Float
  description String?
  customerId  String
  userId      String
  categoryId  String
  status      StatusEnum @default(PENDING)
  category    Categories @relation(fields: [categoryId], references: [id])
  customer    Customers  @relation(fields: [customerId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")

  @@map("transactions")
}

model Savings {
  id          String    @id @default(uuid())
  title       String
  amount      Float
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("savings")
}

model Balance {
  id        String    @id @default(uuid())
  amount    Float
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("balance")
}
